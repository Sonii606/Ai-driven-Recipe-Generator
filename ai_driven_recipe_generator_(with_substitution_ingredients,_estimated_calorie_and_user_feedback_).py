# -*- coding: utf-8 -*-
"""AI - Driven Recipe Generator (with Substitution Ingredients, Estimated Calorie and User Feedback ).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10h756Qergs670H0I62rEex3It9Gjt1Bb
"""

import pandas as pd
import ast

# Load the dataset
df = pd.read_csv("/content/13k-recipes.csv")

# Drop rows with missing ingredients
df = df.dropna(subset=['Cleaned_Ingredients'])

# Collect all ingredients
all_ingredients = []

for entry in df['Cleaned_Ingredients']:
    try:
        ingredients = ast.literal_eval(entry)  # convert string list to actual list
        all_ingredients.extend([i.strip().lower() for i in ingredients])
    except:
        continue

# Get unique ingredient names
unique_ingredients = sorted(set(all_ingredients))

# Print the names (or save to a file if needed)
for ing in unique_ingredients:
    print(ing)

with open("unique_ingredients.txt", "w") as f:
    for ing in unique_ingredients:
        f.write(ing + "\n")

## Full Final Backend

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re
from difflib import get_close_matches
import ast

# ---------------------------
# Calorie database (expandable)
calorie_data = {
    'chicken': 239, 'rice': 130, 'onion': 40, 'garlic': 149, 'tomato': 18,
    'potato': 77, 'milk': 42, 'egg': 155, 'butter': 717, 'cheese': 402,
    'beef': 250, 'carrot': 41, 'oil': 884, 'flour': 364, 'sugar': 387,
    'bread': 265, 'spinach': 23, 'cream': 340, 'pepper': 20
}

# ---------------------------
def extract_keywords(ingredient_desc):
    ingredient_desc = re.sub(r'[^a-zA-Z\s]', '', ingredient_desc).lower()
    return [word for word in ingredient_desc.split() if len(word) > 2]

def estimate_calories(cleaned_ingredients_str, calorie_data):
    try:
        ingredients = ast.literal_eval(cleaned_ingredients_str)
        total = 0
        for item in ingredients:
            keywords = extract_keywords(item)
            for word in keywords:
                match = get_close_matches(word, calorie_data.keys(), n=1, cutoff=0.8)
                if match:
                    total += calorie_data[match[0]]
                    break
        return total
    except:
        return 0

# ---------------------------
def load_data(filepath):
    df = pd.read_csv(filepath)
    df = df.dropna(subset=['Title', 'Cleaned_Ingredients', 'Instructions'])
    return df

def find_best_recipes(user_ingredients, df, top_n=1):
    vectorizer = TfidfVectorizer()
    tfidf_matrix = vectorizer.fit_transform(df['Cleaned_Ingredients'].astype(str))
    user_query = " ".join(user_ingredients)
    user_vector = vectorizer.transform([user_query])
    similarities = cosine_similarity(user_vector, tfidf_matrix).flatten()
    best_indices = similarities.argsort()[-top_n:][::-1]
    return df.iloc[best_indices][['Title', 'Ingredients', 'Instructions', 'Cleaned_Ingredients']]

def suggest_substitutes(ingredient, df):
    ingredient_counts = {}
    for ingredients in df['Cleaned_Ingredients']:
        for item in eval(ingredients):
            if item != ingredient:
                if item not in ingredient_counts:
                    ingredient_counts[item] = 0
                ingredient_counts[item] += 1
    substitutes = sorted(ingredient_counts.items(), key=lambda x: x[1], reverse=True)[:3]
    return [sub[0] for sub in substitutes]

# ---------------------------
def main():
    filepath = "/content/13k-recipes.csv"  # Update this path if needed
    df = load_data(filepath)

    user_ingredients = input("Enter available ingredients (comma-separated): ").split(', ')
    recommendations = find_best_recipes(user_ingredients, df)

    for i, row in recommendations.iterrows():
        print(f"\nSuggested Recipe: {row['Title']}")
        print(f"Ingredients: {row['Ingredients']}")
        print(f"Instructions: {row['Instructions']}")
        estimated_calories = estimate_calories(row['Cleaned_Ingredients'], calorie_data)
        print(f"Estimated Calories: {estimated_calories} kcal")

        need_substitutes = input("Do you need ingredient substitutions? (yes/no): ").strip().lower()
        if need_substitutes == 'yes':
            ingredient_to_replace = input("Enter the ingredient you want to substitute: ").strip()
            substitutes = suggest_substitutes(ingredient_to_replace, df)
            print(f"Suggested substitutes for {ingredient_to_replace}: {substitutes}")

            if substitutes:
                final_choice = input(f"Which substitute would you like to use? {substitutes}: ")
                updated_ingredients = row['Ingredients'].replace(ingredient_to_replace, final_choice)
                print("\nFinal Recipe:")
                print(f"Recipe: {row['Title']}")
                print(f"Updated Ingredients: {updated_ingredients}")
                print(f"Instructions: {row['Instructions']}")

                updated_cleaned = row['Cleaned_Ingredients'].replace(ingredient_to_replace, final_choice)
                updated_calories = estimate_calories(updated_cleaned, calorie_data)
                print(f"Estimated Calories (after substitution): {updated_calories} kcal")

        # ---------------------------
        # ‚≠ê Collect user rating
        while True:
            try:
                rating = float(input("Please rate this recipe (1 to 5): "))
                if 1 <= rating <= 5:
                    break
                else:
                    print("Please enter a number between 1 and 5.")
            except ValueError:
                print("Invalid input. Enter a numeric value.")

        # üìù Collect user feedback
        feedback = input("Any feedback or suggestions for this recipe?: ")

        print("\n‚úÖ Thank you for your feedback!")
        print(f"Rating: {rating}/5")
        print(f"Your feedback: {feedback}")

# ---------------------------
if __name__ == "__main__":
    main()